'use strict';

// Data needed for a later exercise
const flights =
  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

// Data needed for first part of the section
const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  order: function(starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  orderDelivery: function({starterIndex = 1, mainIndex = 0, time = '20:00', address}) {
    console.log(`Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`);
  },

  orderPasta: function(ing1, ing2, ing3) {
    console.log(`Here is your delicious pasta with ${ing1}, ${ing2} and ${ing3}`);
  },

  openingHours: {
    thu: {
      open: 12,
      close: 22,
    },
    fri: {
      open: 11,
      close: 23,
    },
    sat: {
      open: 0, // Open 24 hours
      close: 24,
    },
  },

  

//collect all of the rest into an array
  orderPizza: function(mainIngredient, ...otherIngredients) {
    console.log(mainIngredient);
    console.log(otherIngredients);
  }
};

restaurant.orderDelivery({
  time: '22:30',
  address: 'Via del Sole',
  mainIndex: 2,
  starterIndex: 2,
});

restaurant.orderDelivery({
  address: 'Via del Sole 21',
  starterIndex: 1,
})


// if (restaurant.openingHours && restaurant.openingHours.mon) {
//   console.log(restaurant.openingHours.mon.open);
// }

const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

for(const day of days) {

  const open = restaurant.openingHours[day]?.open ?? 'closed';

  console.log(`On ${day}, we open at ${open}`);
}

console.log(restaurant.orderRisotto?.(0, 1) ?? 'Method doesnt exist');


restaurant.orderPizza('mushroom', 'onion', 'olives', 'spinach');

const {name, openingHours, categories} = restaurant;

const {name: restaurantName, openingHours: hours, categories: tags} = restaurant;

console.log(restaurantName, hours, tags);

const {menu = ["No data"], starterMenu: starter = ["No data"]} = restaurant;
console.log(menu, starter);

//MUTATING VARIABLES
let a = 111;
let b = 999;
const obj = {a: 23, b: 7, c: 14};

({a, b} = obj);
console.log(a,b);

//NESTED OBJECTS
const {fri} = openingHours;
console.log(fri);

const {fri: {open: newOpen, close: newClose}} = openingHours;
console.log(newOpen, newClose);


// const arr = [2,3,4];
// const a = arr[0];
// const b = arr[1];
// const c = arr[2];

// const [x, y, z] = arr;

// const [main, , secondary] = restaurant.categories;

// // [main, secondary] = [secondary, main]; //Vegetarian Italian


// //Receive 2 return values from a function
// const [starter, mainCourse] = restaurant.order(2, 0);

// console.log(starter, mainCourse); //Garlic Bread Pizza

// //array inside an array

// const nested = [2, 4, [5, 6]];

// //to get thhe entire array
// // const [i, , j] = nested; 
// // console.log(i, j);

// //What if we want individual values from nested variable

// const [i, , [j, k]] = nested;

// //Default values
// const [p=1, q=1, r=1] = [8, 9];
// console.log(p, q, r);

const arr = [7, 8, 9];
const badNewArr = [1,2, arr[0], arr[1], arr[2]];
console.log(badNewArr);


const goodNewArr = [1, 2, ...arr];
console.log(goodNewArr);

const newMenu = [...restaurant.mainMenu, 'Gnocci'];
console.log(newMenu);

//Copy array
const mainMenuCopy = [...restaurant.mainMenu];

const wholeMenu = [...restaurant.mainMenu, ...restaurant.starterMenu];
console.log(wholeMenu);

// iterables
// const str = 'Jonas';
// const letters = [...str, '', 'S.'];

// const ingredients = [prompt('Let\'s make pasta! Ingredient1?'), prompt("Ingredient 2?"), prompt("Ingredient 3?")];

// console.log(restaurant.orderPasta(ingredients[0], ingredients[1], ingredients[2]));

// console.log(restaurant.orderPasta(...ingredients));

//OBJECTS 
//create new restaurant object with all the data from original one plus some new data

const newRestaurant = {foundedIn: 1998, ...restaurant, founder: 'Guiseppe'}
console.log(newRestaurant);

const restaurantCopy = {...restaurant};
restaurantCopy.name = 'Ristorante Roma';
console.log(restaurantCopy.name);
console.log(restaurant.name);

const newMain = [...restaurant.starterMenu, 'Gnocci'];
console.log(newMain);

//SPREAD, because on the right side of =
const arrayy = [1, 2, ...[3, 4]];

// REST, because on the LEFT side of =
const [rr, zz, ...others] = [1,2,3,4,5];
console.log(rr, zz, others);


const [pizza, , risotto, ...otherFood] = [...restaurant.mainMenu, ...restaurant.starterMenu];
console.log(pizza, risotto, otherFood);

const {sat, ...weekdays} = restaurant.openingHours;
console.log(sat);

const add = function(...numbers) {
 let sum = 0;

 for (let i = 0; i < numbers.length; i++) {
  sum += numbers[i];
 }

 console.log(sum);
}

const x = [23, 5, 7];

add(...x);


//for practice

//house, student name, age, year, subject

// const hogwartStudents = 
//   {
//   house: 'Slytherin',
//   studentName: 'Tom Riddle',
//   age: 17,
//   year: 4,
//   subject: ['Potions', 'Defense Against The Dark Arts', 'Muggle Studies'],
//   club: ['Knights of Walpurgis', 'Dumbledore Army'],
//   classmates: {
//     Student1: {
//       name: 'Aisha',
//       house: 'Slytherin'
//     },

//     Student2: {
//       name: 'Pansy',
//       house: 'Slytherin'
//     }
//   },

//   // printStudent: function({subject, girlfriend}) {
//   //   console.log(`My name is ${this.studentName}. My favorite subject is ${this.subject[subject]}. My girlfriend is ${this.classmates[girlfriend].name} and she is from ${this.classmates[girlfriend].house} `);
//   // }

//  printStudent: function(subject, girlfriend) {
//     console.log(`My name is ${this.studentName} and my girlfriend is ${girlfriend}, my favorite subject is ${subject}`);
// }

// }
  
// // hogwartStudents.printStudent({
// //   subject: 1,
// //   girlfriend: 'Student1'
// // })


// const updatedStudent = {girlfriend: 'Aisha', favoriteProfessor: 'Slughorn', ...hogwartStudents};

// updatedStudent.studentName = 'Tom Marvolo Riddle';

// console.log(updatedStudent.studentName);
// console.log(hogwartStudents.studentName);

console.log(0 || 'Jonas');

console.log(undefined || 0 || '' || 'Hello' || 23 || null);

restaurant.numGuests = 0;
const guest1 = restaurant.numGuests ? restaurant.numGuests : 10;
console.log(guest1);

const guests2 = restaurant.numGuests || 10;

console.log(guests2);

console.log(7 && 'Jonas');

if(restaurant.orderPizza) {
  restaurant.orderPizza('mushrooms', 'spinach');
}

restaurant.orderPizza && restaurant.orderPizza('mushrooms', 'spinach');

const guessCorrect = restaurant.numGuests ?? 'Not found';
console.log(guessCorrect);

const res1 = {
  name: 'Capri',
  numGuests: 0
};

const res2 = {
  name: 'La Piazza',
  owner: 'Giovanni Rossi'
}

//IF IT EXIST, RETURNS THE VALUE OF NUMGUESTS, IF IT DOESNT, IT RETURNS 10
// res1.numGuests = res1.numGuests || 10; 
// res2.numGuests = res2.numGuests || 10; 



// res1.numGuests ||= 10;
// res2.numGuests ||= 10;


res1.numGuests ??= 10;
res2.numGuests ??= 10;

res1.owner = res1.owner && '<ANONYMOUS>';
res2.owner = res2.owner && '<ANONYMOUS>';

res1.owner &&= '<ANONYMOUS>';
res2.owner &&= '<ANONYMOUS>';

console.log(res1, res2);



const game = {
  team1: 'Bayern Munich',
  team2: 'Borrussia Dortmund',
  players: [
    [
      'Neuer',
      'Pavard',
      'Martinez',
      'Alaba',
      'Davies',
      'Kimmich',
      'Goretzka',
      'Coman',
      'Muller',
      'Gnarby',
      'Lewandowski',
    ],
    [
      'Burki',
      'Schulz',
      'Hummels',
      'Akanji',
      'Hakimi',
      'Weigl',
      'Witsel',
      'Hazard',
      'Brandt',
      'Sancho',
      'Gotze',
    ],
  ],
  score: '4:0',
  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
  date: 'Nov 9th, 2037',
  odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
  },

  
};






// for(const )



/* 
We're building a football betting app (soccer for my American friends ðŸ˜…)!

Suppose we get data from a web service about a certain game (below). In this challenge we're gonna work with the data. So here are your tasks:

1. Create one player array for each team (variables 'players1' and 'players2')
2. The first player in any player array is the goalkeeper and the others are field players. 
For Bayern Munich (team 1) create one variable ('gk') with the goalkeeper's name, and one array ('fieldPlayers') 
with all the remaining 10 field players
3. Create an array 'allPlayers' containing all players of both teams (22 players)
4. During the game, Bayern Munich (team 1) used 3 substitute players. So create a new array ('players1Final') 
containing all the original team1 players plus 'Thiago', 'Coutinho' and 'Perisic'
5. Based on the game.odds object, create one variable for each odd (called 'team1', 'draw' and 'team2')
6. Write a function ('printGoals') that receives an arbitrary number of player names 
(NOT an array) and prints each of them to the console, along with the number of goals that were scored in total (number of player names passed in)
7. The team with the lower odd is more likely to win. Print to the console which team is more likely to win, WITHOUT using an if/else statement or the ternary operator.

TEST DATA FOR 6: Use players 'Davies', 'Muller', 'Lewandowski' and 'Kimmich'. Then, call the function again with players from game.scored

GOOD LUCK ðŸ˜€
*/

const [players1, players2] = game.players;

const [gk, ...fieldPlayers] = players1;

const allPlayers = [...players1, ...players2];

const players1Final = ['Thiago', 'Coutinho', 'Perisic', ...players1];

// const team1 = game.odds.team1;
// const draw1 = game.odds.x;
// const team2 = game.odds.team2;

const {odds: {team1, x: draw, team2}} = game;

const printGoals = function(...players) {
  console.log(`${players.length} goals wered scored`);
}

printGoals(...game.scored);


const menus = [...restaurant.starterMenu, ...restaurant.mainMenu];
// for(const item of menus) console.log(item);

for (const [item, el] of menus.entries()) {
  console.log(`${item + 1}: ${el}`);
}

const girlfriend = {
  firstName: "Aisha",
  lastName: "Willows",
  
}

const tom = {
  firstName: "Tom",
  lastName: "Riddle",
  friends: ['Mattheo', 'Draco', 'Pansy', ['Aisha', 'Nagini']],
  pet: ['Snake', 'Owl'],
  
  girlfriend,



}

// const allTom = [...tom.friends, ...tom.pet];

// for (const [iterator, item] of allTom.entries()) {
//   console.log(`No: ${iterator + 1} ${item}`);
// }

const users = [{name: 'Jonas', email: 'he@gmail.com'},
{name: 'Testing', email: 'testing@gmail.com'}];

console.log(users[0]?.name ?? 'User array empty');

if (users.length > 0) {
  console.log(users[0].name);
}

else {
  console.log('User array empty');
}


const user = {
  id: 1,
  name: 'John Doe',
  address: {
    city: 'New York',
    // street property might be missing
    // Uncomment the line below to simulate the absence of the street property
    // street: '123 Main St',
    postalCode: '10001'
  }
};


console.log('Street:', user.address?.street ?? 'Street name is not available');

/* Your task is to loop through the array of students and log each student's name along with their average grade. 
If a student's grades array is missing or empty, log a message indicating that no grades are available for that student. */


const students = [
  {
    name: 'Alice',
    age: 20,
    grades: [85, 90, 88]
  },
  {
    name: 'Bob',
    age: 22,
    // grades array might be missing or empty
  },
  {
    name: 'Charlie',
    age: 21,
    grades: [] // grades array might be empty
  }
];


for(const studs of students) {
  let calculate = 0

  console.log(`Student Name: ${studs.name}`);

  if (studs?.grades && studs.grades?.length) {
     
    for (const cal of studs.grades) {
      calculate += Math.floor(cal/studs.grades.length);
    }

     console.log(`Average Grade: ${calculate}`);
  }

  else {
    console.log ('No grades are available for that student');
  }

}

const properties = Object.keys(openingHours);
let openStr = `We are open on ${properties.length} days: `;

for (const day of Object.keys(openingHours)) {
  openStr += `${day}, `;
  
}

console.log(openStr);


// PROPERTY VALUES
const values = Object.values(openingHours)
console.log(values);

// entires
const entries = Object.entries(openingHours);
console.log(entries);

//We specify the open, close to destructure
for(const [day, {open, close}] of entries) {
  console.log(`On ${day} we open at ${open} and close at ${close} `);
}





const company = {
  engineering: [
    { name: 'Alice', salary: 60000 },
    { name: 'Bob', salary: 70000 }
  ],
  marketing: [
    { name: 'Charlie', salary: 50000 },
    { name: 'David', salary: 55000 },
    { name: 'Eva' }
  ],
  finance: [
    { name: 'Frank', salary: 80000 },
    { name: 'Grace', salary: 75000 }
  ]
};

for(const [iterate, player]  of game.scored.entries()) {
  console.log(`Goal ${iterate + 1}: ${player}`);

  
  
}

let average = 0;



for(const odd of Object.values(game.odds))
{
  average += odd/Object.values(game.odds).length;

}

console.log(average);

// 3

for(const [team, odd] of Object.entries(game.odds) ) {
    const teamStr = team === 'x' ? 'draw' : `victory ${game[team]}`;

    console.log(`Odd of ${teamStr} ${odd}`);

}

const gryf = {
  "John": { math: 85, science: 90, history: 75 },
  "Alice": { math: 90, science: 80, history: 85 },
  "Bob": { math: 70, science: 75, history: 80 },
  "Emily": { math: 95, science: 85, history: 90 }
};

for(const [student, subjects] of Object.entries(gryf)) {
 let average = 0;
 
  for (const score of Object.values(subjects)) {
    average += score/Object.values(subjects).length;
  }

  console.log(`${student}: ${average}`);

}


// set

const orderSet = new Set(['Pasta', 'Pizza', 'Pizza', 'Risotto', 'Pasta']);
console.log(orderSet); // {'Pasta', 'Pizza, 'Risotto}

console.log(orderSet.size);

for (const [i, order] of orderSet) {
  console.log(i, order);
}


const staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];
const staffUnique = [...new Set(staff)];
console.log(staffUnique);

console.log(new Set('Tom Riddle').size);

const nums1 = [4, 9, 5];
const nums2 = [9, 4, 9, 8, 4];

const intersection = function(nums1, nums2) {
  // const set1 = new Set([nums1]);
  const set1 = new Set(nums1);
 
 
  let unique = new Set();


  for(const individual of nums2) {
    const check = set1.has(individual);

    if (check) {
      unique = new Set([individual]);
    }
    
  return unique;

  }

}

// console.log(intersection(...nums1, ...nums2));

// console.log(intersection(nums1, nums2));

console.log(intersection(nums1, nums2));

/* Problem: Given two arrays of integers, find the intersection of the two arrays. 
The intersection is the set of elements that are common to both arrays. Return the intersection as an array with unique elements.

Write a function called intersection that takes in two arrays as arguments and returns an array containing the intersection of the two arrays.

Remember, a set is a collection of unique elements. So, the output array should not contain any duplicate elements. 
You can use JavaScript's Set object to help you solve this problem.
*/